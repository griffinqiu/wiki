== Tools ==
=== Viewer ===
	* IE: IE Developer Toolbar
	* Safari: ResizeMe
	* Firefox: Firesizer
	* Chrome: Windows Resizer
	
== CSS ==

=== Slidingdoors ===
{{{ class="brush: html"
<a href="#"><span>Box Title</span></a>
}}}
{{{ class="brush: css"
a { 
  display: block; 
  height: 40px; 
  float: left; 
  font-size: 1.2em; 
  padding-right: 0.8em; 
  background: url(images/headerRight.png) no-repeat scroll top right; 
} 
a span { 
  background: url(images/headerLeft.png) no-repeat; 
  display: block; 
  line-height: 40px; 
  padding-left: 0.8em; 
} 
}}}

=== Radius ===
{{{ class="brush: html"
<a href="#">Box Title</a> 
}}}
{{{ class="brush: css"
a { 
  float: left; 
  height: 40px; 
  line-height: 40px; 
  padding-left: 0.8em; 
  padding-right: 0.8em;  
  border-top-left-radius: 8px; 
  border-top-right-radius: 8px; 
  background-image: url(images/headerTiny.png); 
  background-repeat: repeat-x; 
} 
}}}

=== Linear Gradient ===
{{{ class="brush: css"
background-color: #42c264;   
background-image: -webkit-linear-gradient(#4fec50, #42c264); 
background-image: -moz-linear-gradient(#4fec50, #42c264); 
background-image: -o-linear-gradient(#4fec50, #42c264); 
background-image: -ms-linear-gradient(#4fec50, #42c264); 
background-image: -chrome-linear-gradient(#4fec50, #42c264); 
background-image: linear-gradient(#4fec50, #42c264); 
}}}

=== Eric Meyer CSS reset for HTML 4 ===
{{{ class="brush: css"
/* http://meyerweb.com/eric/tools/css/reset/ */
/* v1.0 | 20080212 */

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, font, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td {
	margin: 0;
	padding: 0;
	border: 0;
	outline: 0;
	font-size: 100%;
	vertical-align: baseline;
	background: transparent;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}

/* remember to define focus styles! */
:focus {
	outline: 0;
}

/* remember to highlight inserts somehow! */
ins {
	text-decoration: none;
}
del {
	text-decoration: line-through;
}

/* tables still need 'cellspacing="0"' in the markup */
table {
	border-collapse: collapse;
	border-spacing: 0;
}
}}}

=== CSS reset for HTML 5 ===
http://necolas.github.com/normalize.css/


== 媒体和媒体查询 ==
	* width：视口宽度。 
	* height：视口高度。 
	* device-width：渲染表面的宽度（对我们来说，就是设备屏幕的宽度）。 
	* device-height：渲染表面的高度（对我们来说，就是设备屏幕的高度）。 
	* orientation：检查设备处于横向还是纵向。 
	* aspect-ratio：基于视口宽度和高度的宽高比。一个 16∶9 比例的显示屏可以这样定义 aspect-ratio: 16/9。 
	* device-aspect-ratio：和 aspect-ratio 类似，基于设备渲染平面宽度和高度的宽高比。 
	* color：每种颜色的位数。例如 min-color: 16 会检测设备是否拥有 16位颜色。 
	* color-index：设备的颜色索引表中的颜色数。值必须是非负整数。 
	* monochrome：检测单色帧缓冲区中每像素所使用的位数。值必须是非负整数，如monochrome: 2。 
	* resolution：用来检测屏幕或打印机的分辨率，如 min-resolution: 300dpi。还可以接受每厘米像素点数的度量值，如 min-resolution: 118dpcm。 
	* scan：电视机的扫描方式，值可设为 progressive（逐行扫描）或 interlace（隔行扫描） 。如 720p HD电视（720p的 p即表明是逐行扫描）匹配 scan: progressive，而 1080i HD 电视（1080i中的 i表明是隔行扫描）匹配 scan: interlace。 
	* grid：用来检测输出设备是网格设备还是位图设备。 

=== CSS ===
{{{ class="brush: css"
body { 
  background-color: grey; 
} 
@media screen and (max-width: 960px) { 
  body { 
    background-color: red; 
  } 
} 
@media screen and (max-width: 768px) { 
  body { 
    background-color: orange; 
  } 
}  
@media screen and (max-width: 550px) { 
  body { 
    background-color: yellow; 
  } 
}  
@media screen and (max-width: 320px) { 
  body { 
    background-color: green; 
  } 
}  
@media screen and (max-device-width: 400px) { 
  h1 { color: green } 
} 
@import url("phone.css") screen and (max-width:360px);
}}}

=== <link>的meida属性 ===
{{{ class="brush: html"
<link rel="stylesheet" type="text/css" media="screen" href="screen-styles.css"> 
<link rel="stylesheet" media="screen and (orientation: portrait)" href="portrait-screen.css" /> 
<link rel="stylesheet" media="not screen and (orientation: portrait)" href="portrait-screen.css" /> 
<link rel="stylesheet" media="screen and (orientation: portrait) and (min-width: 800px)" href="800wide-portrait-screen.css" /> 
<link rel="stylesheet" media="screen and (orientation: portrait) and (min-width: 800px), projection" href="800wide-portrait-screen.css" /> 
}}}

=== IE8一下的版本 ===
插件Respond.js

=== viewport meta ===
iOS和Android浏览器都是WebKit
{{{ class="brush: html"
<meta name="viewport"  content="initial-scale=2.0,width=device-width" /> 
<meta name="viewport" content="width=device-width, maximum-scale=3, minimum-scale=0.5" /> 
<!-- 阻止移动浏览器自动调整页面大小 -->
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" /> 
}}}

CSS的草案 @viewport, @-o-viewport

=== 字体 ===
现代浏览器默认字体大小
font-size: 100%; 
font-size: 16px; 
font-size: 1em; 

== 宽度规格 ==
	* 1414: 大多数浏览器恰好能剪切出完整的角旗
	* 950-1000: Web2.0大多数情况下满足的需求
	* 980: 竖直方向iOS的Safari默认按照980像素解析页面，然后缩放到viewport的大小
	* 768: iPad竖直viewport宽度
	* 1024： iPad横向viewport宽度
	* 640: iPhone 4+竖直viewport宽度
	* 960: iPhone 4+横向viewport宽度

== 图片自适应工具 ==
http://adaptive-images.com/

== CSS网格布局 ==
	* [[http://semantic.gs|Semantic]]
	* [[http://getskeleton.com|Skeleton]]
	* [[http://lessframework.com|Less Framework]]
	* [[http://cssgrid.net|1140 CSS Grid]]
	* [[http://www.columnal.com|Columnal]] 

== Term ==
	* polyfill 跨浏览器响应问题时，会介绍一些刚刚涌现的新工具（因为它们是用于修补旧浏览器缺陷的，所以也被称为 polyfill）
